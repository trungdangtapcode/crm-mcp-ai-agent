"""
A utility script to check the FastMCP server routes
"""
import sys
from pathlib import Path
import logging

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from server.main import create_mcp_server

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger("check_routes")

def check_routes():
    """Check the routes generated by FastMCP"""
    logger.info("Creating MCP server instance...")
    mcp = create_mcp_server()
    
    # Introspect the router if accessible
    logger.info("\nIntrospecting server information...")
    
    # Try to access attributes
    for attr_name in dir(mcp):
        # Skip private attributes
        if attr_name.startswith('_'):
            continue
        
        try:
            attr_value = getattr(mcp, attr_name)
            logger.info(f"Attribute: {attr_name}, Type: {type(attr_value)}")
            
            # If it's a callable, skip
            if callable(attr_value):
                continue
                
            # If it looks like a container, print a sample
            if hasattr(attr_value, '__iter__') and not isinstance(attr_value, str):
                try:
                    # Try to get the first few items
                    sample = list(attr_value)[:5] if hasattr(attr_value, '__len__') else []
                    logger.info(f"  Sample: {sample}")
                except:
                    pass
        except:
            logger.info(f"  Could not access {attr_name}")
    
    logger.info("\nServer info:")
    logger.info(f"Host: {mcp.host if hasattr(mcp, 'host') else 'default'}")
    logger.info(f"Port: {mcp.port if hasattr(mcp, 'port') else 'default'}")
    
    logger.info("\nCheck complete!")

if __name__ == "__main__":
    check_routes()
